#!/usr/bin/env python2

import logging
from logging.handlers import RotatingFileHandler
import argparse
import math
import string
import sys
import os
import errno
from asyncore import file_dispatcher, loop

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

B_SUFFIX = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
b_suffix = [_.lower() for _ in B_SUFFIX]

def unbytify(ovalue):
    value = ovalue.strip().lower()
    mult = 1
    for x in xrange(len(b_suffix)-1, -1, -1):
        try:
            v, rest = value.split(b_suffix[x][0])
            rest = (b_suffix[x][0] + rest).strip()
            if rest != b_suffix[x] and rest != b_suffix[x][0]:
                raise ValueError
            value, mult = v, math.pow(1024, x)
            break
        except ValueError:
            continue
    try:
        return int(string.atof(value) * mult)
    except ValueError:
        raise ValueError("Invalid value %s (permitted suffixes: %s)" % (ovalue, ', '.join(B_SUFFIX)))

aparser = argparse.ArgumentParser()
aparser.add_argument('-c', '--count', default=10, help='Max log files', type=int)
aparser.add_argument('-s', '--size', default='1M', help='Max log file size')
aparser.add_argument('-d', '--date', default=False, help='Prepend the date before logging a message', action='store_true')
aparser.add_argument('file', help='Log file name', nargs=1)
args = aparser.parse_args()

mkdir_p(os.path.dirname(args.file[0]))

fmt = '%(message)s'
if args.date: fmt = '%(asctime)s ' + fmt
formatter = logging.Formatter(fmt)
root = logging.getLogger()
root.setLevel(logging.DEBUG)
handler = RotatingFileHandler(args.file[0], maxBytes=unbytify(args.size), backupCount=args.count)
handler.setFormatter(formatter)
root.addHandler(handler)

class Reader(file_dispatcher, object):
    ignore_log_types = frozenset(['info'])
    def __init__(self):
        self._buf = []
        super(Reader, self).__init__(sys.stdin.fileno())

    def writable(self):
        return False

    def recv(self, ign=None):
        return sys.stdin.read(1)

    def handle_close(self):
        if self.process() == 0:
            self.flush()
            self.close()

    def flush(self):
        root.info(''.join(self._buf))
        handler.flush()
        self._buf = []

    def process(self):
        count = 0
        for c in self.recv():
            count += 1
            if c in ['\n']:
                self.flush()
            else:
                self._buf += [c]
        return count

    def handle_read(self):
        self.process()

try:
    Reader()
    loop(use_poll=True)
except KeyboardInterrupt:
    pass
